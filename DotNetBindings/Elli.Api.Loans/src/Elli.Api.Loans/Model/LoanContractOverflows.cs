/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractOverflows
    /// </summary>
    [DataContract]
    public partial class LoanContractOverflows :  IEquatable<LoanContractOverflows>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets CoordinateBottom
        /// </summary>
        [DataMember(Name="coordinateBottom", EmitDefaultValue=false)]
        public string CoordinateBottom { get; set; }

        /// <summary>
        /// Gets or Sets CoordinateTop
        /// </summary>
        [DataMember(Name="coordinateTop", EmitDefaultValue=false)]
        public string CoordinateTop { get; set; }

        /// <summary>
        /// Gets or Sets CoordinateLeft
        /// </summary>
        [DataMember(Name="coordinateLeft", EmitDefaultValue=false)]
        public string CoordinateLeft { get; set; }

        /// <summary>
        /// Gets or Sets CoordinateRight
        /// </summary>
        [DataMember(Name="coordinateRight", EmitDefaultValue=false)]
        public string CoordinateRight { get; set; }

        /// <summary>
        /// Gets or Sets CoordinateText
        /// </summary>
        [DataMember(Name="coordinateText", EmitDefaultValue=false)]
        public string CoordinateText { get; set; }

        /// <summary>
        /// Gets or Sets OriginalText
        /// </summary>
        [DataMember(Name="originalText", EmitDefaultValue=false)]
        public string OriginalText { get; set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Gets or Sets TemplateFieldName
        /// </summary>
        [DataMember(Name="templateFieldName", EmitDefaultValue=false)]
        public string TemplateFieldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractOverflows {\n");
            sb.Append("  CoordinateBottom: ").Append(CoordinateBottom).Append("\n");
            sb.Append("  CoordinateTop: ").Append(CoordinateTop).Append("\n");
            sb.Append("  CoordinateLeft: ").Append(CoordinateLeft).Append("\n");
            sb.Append("  CoordinateRight: ").Append(CoordinateRight).Append("\n");
            sb.Append("  CoordinateText: ").Append(CoordinateText).Append("\n");
            sb.Append("  OriginalText: ").Append(OriginalText).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  TemplateFieldName: ").Append(TemplateFieldName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractOverflows);
        }

        /// <summary>
        /// Returns true if LoanContractOverflows instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractOverflows to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractOverflows input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CoordinateBottom == input.CoordinateBottom ||
                    (this.CoordinateBottom != null &&
                    this.CoordinateBottom.Equals(input.CoordinateBottom))
                ) && 
                (
                    this.CoordinateTop == input.CoordinateTop ||
                    (this.CoordinateTop != null &&
                    this.CoordinateTop.Equals(input.CoordinateTop))
                ) && 
                (
                    this.CoordinateLeft == input.CoordinateLeft ||
                    (this.CoordinateLeft != null &&
                    this.CoordinateLeft.Equals(input.CoordinateLeft))
                ) && 
                (
                    this.CoordinateRight == input.CoordinateRight ||
                    (this.CoordinateRight != null &&
                    this.CoordinateRight.Equals(input.CoordinateRight))
                ) && 
                (
                    this.CoordinateText == input.CoordinateText ||
                    (this.CoordinateText != null &&
                    this.CoordinateText.Equals(input.CoordinateText))
                ) && 
                (
                    this.OriginalText == input.OriginalText ||
                    (this.OriginalText != null &&
                    this.OriginalText.Equals(input.OriginalText))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.TemplateFieldName == input.TemplateFieldName ||
                    (this.TemplateFieldName != null &&
                    this.TemplateFieldName.Equals(input.TemplateFieldName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CoordinateBottom != null)
                    hashCode = hashCode * 59 + this.CoordinateBottom.GetHashCode();
                if (this.CoordinateTop != null)
                    hashCode = hashCode * 59 + this.CoordinateTop.GetHashCode();
                if (this.CoordinateLeft != null)
                    hashCode = hashCode * 59 + this.CoordinateLeft.GetHashCode();
                if (this.CoordinateRight != null)
                    hashCode = hashCode * 59 + this.CoordinateRight.GetHashCode();
                if (this.CoordinateText != null)
                    hashCode = hashCode * 59 + this.CoordinateText.GetHashCode();
                if (this.OriginalText != null)
                    hashCode = hashCode * 59 + this.OriginalText.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.TemplateFieldName != null)
                    hashCode = hashCode * 59 + this.TemplateFieldName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
