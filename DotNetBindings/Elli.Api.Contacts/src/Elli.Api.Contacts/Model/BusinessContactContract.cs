/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Contacts
 *
 * Represents borrower and business contacts
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Contacts.Client.SwaggerDateConverter;

namespace Elli.Api.Contacts.Model
{
    /// <summary>
    /// BusinessContactContract
    /// </summary>
    [DataContract]
    public partial class BusinessContactContract :  IEquatable<BusinessContactContract>, IValidatableObject
    {
    
        
        /// <summary>
        /// The business category ID for the business contact. Possible values are: 0 - Appraiser, 1 - Attorney, 2 - Credit Company, 3 - Doc Signing, 4 - Escrow Company, 5 - Flood Insurance, 6 - Hazard Insurance, 7 - Lender, 8 - Mortgage Insurance, 9 - Real Estate Agent, 10 - Servicing, 11 - Title Insurance, 12 - Underwriter, 13 - Surveyor, 14 - No Category, 15 - Organization, 16 - Verification, 17 - Investor, 18 - Warehouse Bank, 19 - Builder, 20 - Dealer, 21 - TradeAssignee
        /// </summary>
        /// <value>The business category ID for the business contact. Possible values are: 0 - Appraiser, 1 - Attorney, 2 - Credit Company, 3 - Doc Signing, 4 - Escrow Company, 5 - Flood Insurance, 6 - Hazard Insurance, 7 - Lender, 8 - Mortgage Insurance, 9 - Real Estate Agent, 10 - Servicing, 11 - Title Insurance, 12 - Underwriter, 13 - Surveyor, 14 - No Category, 15 - Organization, 16 - Verification, 17 - Investor, 18 - Warehouse Bank, 19 - Builder, 20 - Dealer, 21 - TradeAssignee</value>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryFields
        /// </summary>
        [DataMember(Name="categoryFields", EmitDefaultValue=false)]
        public List<BusinessContactContractCategoryFields> CategoryFields { get; set; }

        /// <summary>
        /// The contact&#39;s company name.
        /// </summary>
        /// <value>The contact&#39;s company name.</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Rate or fee charged by the contact’s services.
        /// </summary>
        /// <value>Rate or fee charged by the contact’s services.</value>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public int? Fees { get; set; }

        /// <summary>
        /// Gets or Sets PersonalContactLicense
        /// </summary>
        [DataMember(Name="personalContactLicense", EmitDefaultValue=false)]
        public BusinessContactContractPersonalContactLicense PersonalContactLicense { get; set; }

        /// <summary>
        /// Gets or Sets BusinessContactLicense
        /// </summary>
        [DataMember(Name="businessContactLicense", EmitDefaultValue=false)]
        public BusinessContactContractBusinessContactLicense BusinessContactLicense { get; set; }

        /// <summary>
        /// Gets or Sets NoSpam
        /// </summary>
        [DataMember(Name="noSpam", EmitDefaultValue=false)]
        public bool? NoSpam { get; set; }

        /// <summary>
        /// The contact&#39;s first name.
        /// </summary>
        /// <value>The contact&#39;s first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The contact&#39;s last name.
        /// </summary>
        /// <value>The contact&#39;s last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Possible values are: 0 – Private, 1- Public.
        /// </summary>
        /// <value>Possible values are: 0 – Private, 1- Public.</value>
        [DataMember(Name="accessLevel", EmitDefaultValue=false)]
        public int? AccessLevel { get; set; }

        /// <summary>
        /// Gets or Sets CurrentMailingAddress
        /// </summary>
        [DataMember(Name="currentMailingAddress", EmitDefaultValue=false)]
        public BorrowerContactContractCurrentMailingAddress CurrentMailingAddress { get; set; }

        /// <summary>
        /// Gets or Sets BizAddress
        /// </summary>
        [DataMember(Name="bizAddress", EmitDefaultValue=false)]
        public BorrowerContactContractBizAddress BizAddress { get; set; }

        /// <summary>
        /// Website URL of contact&#39;s work.
        /// </summary>
        /// <value>Website URL of contact&#39;s work.</value>
        [DataMember(Name="businessWebUrl", EmitDefaultValue=false)]
        public string BusinessWebUrl { get; set; }

        /// <summary>
        /// The contact&#39;s job title
        /// </summary>
        /// <value>The contact&#39;s job title</value>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// The contact&#39;s work phone number.
        /// </summary>
        /// <value>The contact&#39;s work phone number.</value>
        [DataMember(Name="workPhone", EmitDefaultValue=false)]
        public string WorkPhone { get; set; }

        /// <summary>
        /// The contact&#39;s home phone number.
        /// </summary>
        /// <value>The contact&#39;s home phone number.</value>
        [DataMember(Name="homePhone", EmitDefaultValue=false)]
        public string HomePhone { get; set; }

        /// <summary>
        /// The contact&#39;s cell phone number.
        /// </summary>
        /// <value>The contact&#39;s cell phone number.</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// The contact&#39;s fax number.
        /// </summary>
        /// <value>The contact&#39;s fax number.</value>
        [DataMember(Name="faxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// The contact&#39;s personal email address.
        /// </summary>
        /// <value>The contact&#39;s personal email address.</value>
        [DataMember(Name="personalEmail", EmitDefaultValue=false)]
        public string PersonalEmail { get; set; }

        /// <summary>
        /// The contact&#39;s work email address.
        /// </summary>
        /// <value>The contact&#39;s work email address.</value>
        [DataMember(Name="businessEmail", EmitDefaultValue=false)]
        public string BusinessEmail { get; set; }

        /// <summary>
        /// The contact&#39;s primary email address.
        /// </summary>
        /// <value>The contact&#39;s primary email address.</value>
        [DataMember(Name="primaryEmail", EmitDefaultValue=false)]
        public string PrimaryEmail { get; set; }

        /// <summary>
        /// The contact&#39;s primary phone number.
        /// </summary>
        /// <value>The contact&#39;s primary phone number.</value>
        [DataMember(Name="primaryPhone", EmitDefaultValue=false)]
        public string PrimaryPhone { get; set; }

        /// <summary>
        /// Ms., Miss, Mrs., Mr., Dr., etc.
        /// </summary>
        /// <value>Ms., Miss, Mrs., Mr., Dr., etc.</value>
        [DataMember(Name="salutation", EmitDefaultValue=false)]
        public string Salutation { get; set; }

        /// <summary>
        /// The contactId (or id) is the unique identifier of the contact. It is returned in the response header when the contact is created.
        /// </summary>
        /// <value>The contactId (or id) is the unique identifier of the contact. It is returned in the response header when the contact is created.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Group ids, unique identifier or id of the groups to which this contact is assigned.
        /// </summary>
        /// <value>Group ids, unique identifier or id of the groups to which this contact is assigned.</value>
        [DataMember(Name="groupIDs", EmitDefaultValue=false)]
        public List<int?> GroupIDs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessContactContract {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryFields: ").Append(CategoryFields).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  PersonalContactLicense: ").Append(PersonalContactLicense).Append("\n");
            sb.Append("  BusinessContactLicense: ").Append(BusinessContactLicense).Append("\n");
            sb.Append("  NoSpam: ").Append(NoSpam).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  CurrentMailingAddress: ").Append(CurrentMailingAddress).Append("\n");
            sb.Append("  BizAddress: ").Append(BizAddress).Append("\n");
            sb.Append("  BusinessWebUrl: ").Append(BusinessWebUrl).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  PersonalEmail: ").Append(PersonalEmail).Append("\n");
            sb.Append("  BusinessEmail: ").Append(BusinessEmail).Append("\n");
            sb.Append("  PrimaryEmail: ").Append(PrimaryEmail).Append("\n");
            sb.Append("  PrimaryPhone: ").Append(PrimaryPhone).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GroupIDs: ").Append(GroupIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessContactContract);
        }

        /// <summary>
        /// Returns true if BusinessContactContract instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessContactContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessContactContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CategoryFields == input.CategoryFields ||
                    this.CategoryFields != null &&
                    this.CategoryFields.SequenceEqual(input.CategoryFields)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Fees == input.Fees ||
                    (this.Fees != null &&
                    this.Fees.Equals(input.Fees))
                ) && 
                (
                    this.PersonalContactLicense == input.PersonalContactLicense ||
                    (this.PersonalContactLicense != null &&
                    this.PersonalContactLicense.Equals(input.PersonalContactLicense))
                ) && 
                (
                    this.BusinessContactLicense == input.BusinessContactLicense ||
                    (this.BusinessContactLicense != null &&
                    this.BusinessContactLicense.Equals(input.BusinessContactLicense))
                ) && 
                (
                    this.NoSpam == input.NoSpam ||
                    (this.NoSpam != null &&
                    this.NoSpam.Equals(input.NoSpam))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.AccessLevel == input.AccessLevel ||
                    (this.AccessLevel != null &&
                    this.AccessLevel.Equals(input.AccessLevel))
                ) && 
                (
                    this.CurrentMailingAddress == input.CurrentMailingAddress ||
                    (this.CurrentMailingAddress != null &&
                    this.CurrentMailingAddress.Equals(input.CurrentMailingAddress))
                ) && 
                (
                    this.BizAddress == input.BizAddress ||
                    (this.BizAddress != null &&
                    this.BizAddress.Equals(input.BizAddress))
                ) && 
                (
                    this.BusinessWebUrl == input.BusinessWebUrl ||
                    (this.BusinessWebUrl != null &&
                    this.BusinessWebUrl.Equals(input.BusinessWebUrl))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.WorkPhone == input.WorkPhone ||
                    (this.WorkPhone != null &&
                    this.WorkPhone.Equals(input.WorkPhone))
                ) && 
                (
                    this.HomePhone == input.HomePhone ||
                    (this.HomePhone != null &&
                    this.HomePhone.Equals(input.HomePhone))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.PersonalEmail == input.PersonalEmail ||
                    (this.PersonalEmail != null &&
                    this.PersonalEmail.Equals(input.PersonalEmail))
                ) && 
                (
                    this.BusinessEmail == input.BusinessEmail ||
                    (this.BusinessEmail != null &&
                    this.BusinessEmail.Equals(input.BusinessEmail))
                ) && 
                (
                    this.PrimaryEmail == input.PrimaryEmail ||
                    (this.PrimaryEmail != null &&
                    this.PrimaryEmail.Equals(input.PrimaryEmail))
                ) && 
                (
                    this.PrimaryPhone == input.PrimaryPhone ||
                    (this.PrimaryPhone != null &&
                    this.PrimaryPhone.Equals(input.PrimaryPhone))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupIDs == input.GroupIDs ||
                    this.GroupIDs != null &&
                    this.GroupIDs.SequenceEqual(input.GroupIDs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.CategoryFields != null)
                    hashCode = hashCode * 59 + this.CategoryFields.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.PersonalContactLicense != null)
                    hashCode = hashCode * 59 + this.PersonalContactLicense.GetHashCode();
                if (this.BusinessContactLicense != null)
                    hashCode = hashCode * 59 + this.BusinessContactLicense.GetHashCode();
                if (this.NoSpam != null)
                    hashCode = hashCode * 59 + this.NoSpam.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.AccessLevel != null)
                    hashCode = hashCode * 59 + this.AccessLevel.GetHashCode();
                if (this.CurrentMailingAddress != null)
                    hashCode = hashCode * 59 + this.CurrentMailingAddress.GetHashCode();
                if (this.BizAddress != null)
                    hashCode = hashCode * 59 + this.BizAddress.GetHashCode();
                if (this.BusinessWebUrl != null)
                    hashCode = hashCode * 59 + this.BusinessWebUrl.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.WorkPhone != null)
                    hashCode = hashCode * 59 + this.WorkPhone.GetHashCode();
                if (this.HomePhone != null)
                    hashCode = hashCode * 59 + this.HomePhone.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.PersonalEmail != null)
                    hashCode = hashCode * 59 + this.PersonalEmail.GetHashCode();
                if (this.BusinessEmail != null)
                    hashCode = hashCode * 59 + this.BusinessEmail.GetHashCode();
                if (this.PrimaryEmail != null)
                    hashCode = hashCode * 59 + this.PrimaryEmail.GetHashCode();
                if (this.PrimaryPhone != null)
                    hashCode = hashCode * 59 + this.PrimaryPhone.GetHashCode();
                if (this.Salutation != null)
                    hashCode = hashCode * 59 + this.Salutation.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GroupIDs != null)
                    hashCode = hashCode * 59 + this.GroupIDs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
