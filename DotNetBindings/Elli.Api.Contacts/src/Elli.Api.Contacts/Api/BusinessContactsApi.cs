/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Contacts
 *
 * Represents borrower and business contacts
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Contacts.Client;
using Elli.Api.Contacts.Model;

namespace Elli.Api.Contacts.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Business Contact
        /// </summary>
        /// <remarks>
        /// Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns></returns>
        void CreateBusinessContact (BusinessContactContract contact);

        /// <summary>
        /// Create Business Contact
        /// </summary>
        /// <remarks>
        /// Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateBusinessContactWithHttpInfo (BusinessContactContract contact);
        /// <summary>
        /// Create Business Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns></returns>
        void CreateBusinessContactNote (string contactId, ContactNoteContract note);

        /// <summary>
        /// Create Business Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateBusinessContactNoteWithHttpInfo (string contactId, ContactNoteContract note);
        /// <summary>
        /// Delete Business Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns></returns>
        void DeleteBusinessContact (string contactId);

        /// <summary>
        /// Delete Business Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBusinessContactWithHttpInfo (string contactId);
        /// <summary>
        /// Delete Business Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns></returns>
        void DeleteBusinessContactNote (string contactId, string noteId);

        /// <summary>
        /// Delete Business Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBusinessContactNoteWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Retrieve Business Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>BusinessContactContract</returns>
        BusinessContactContract GetBusinessContact (string contactId);

        /// <summary>
        /// Retrieve Business Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of BusinessContactContract</returns>
        ApiResponse<BusinessContactContract> GetBusinessContactWithHttpInfo (string contactId);
        /// <summary>
        /// Retrieve Business Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ContactNoteContract</returns>
        ContactNoteContract GetBusinessContactNote (string contactId, string noteId);

        /// <summary>
        /// Retrieve Business Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        ApiResponse<ContactNoteContract> GetBusinessContactNoteWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Update Business Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>BusinessContactContract</returns>
        BusinessContactContract UpdateBusinessContact (string contactId, BusinessContactContract contact);

        /// <summary>
        /// Update Business Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>ApiResponse of BusinessContactContract</returns>
        ApiResponse<BusinessContactContract> UpdateBusinessContactWithHttpInfo (string contactId, BusinessContactContract contact);
        /// <summary>
        /// Update Business Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ContactNoteContract</returns>
        ContactNoteContract UpdateBusinessContactNote (string contactId, string noteId, ContactNoteContract note);

        /// <summary>
        /// Update Business Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        ApiResponse<ContactNoteContract> UpdateBusinessContactNoteWithHttpInfo (string contactId, string noteId, ContactNoteContract note);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Business Contact
        /// </summary>
        /// <remarks>
        /// Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateBusinessContactAsync (BusinessContactContract contact);

        /// <summary>
        /// Create Business Contact
        /// </summary>
        /// <remarks>
        /// Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBusinessContactAsyncWithHttpInfo (BusinessContactContract contact);
        /// <summary>
        /// Create Business Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateBusinessContactNoteAsync (string contactId, ContactNoteContract note);

        /// <summary>
        /// Create Business Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBusinessContactNoteAsyncWithHttpInfo (string contactId, ContactNoteContract note);
        /// <summary>
        /// Delete Business Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBusinessContactAsync (string contactId);

        /// <summary>
        /// Delete Business Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessContactAsyncWithHttpInfo (string contactId);
        /// <summary>
        /// Delete Business Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBusinessContactNoteAsync (string contactId, string noteId);

        /// <summary>
        /// Delete Business Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessContactNoteAsyncWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Retrieve Business Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of BusinessContactContract</returns>
        System.Threading.Tasks.Task<BusinessContactContract> GetBusinessContactAsync (string contactId);

        /// <summary>
        /// Retrieve Business Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse (BusinessContactContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessContactContract>> GetBusinessContactAsyncWithHttpInfo (string contactId);
        /// <summary>
        /// Retrieve Business Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ContactNoteContract</returns>
        System.Threading.Tasks.Task<ContactNoteContract> GetBusinessContactNoteAsync (string contactId, string noteId);

        /// <summary>
        /// Retrieve Business Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified business contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> GetBusinessContactNoteAsyncWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Update Business Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of BusinessContactContract</returns>
        System.Threading.Tasks.Task<BusinessContactContract> UpdateBusinessContactAsync (string contactId, BusinessContactContract contact);

        /// <summary>
        /// Update Business Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of ApiResponse (BusinessContactContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessContactContract>> UpdateBusinessContactAsyncWithHttpInfo (string contactId, BusinessContactContract contact);
        /// <summary>
        /// Update Business Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ContactNoteContract</returns>
        System.Threading.Tasks.Task<ContactNoteContract> UpdateBusinessContactNoteAsync (string contactId, string noteId, ContactNoteContract note);

        /// <summary>
        /// Update Business Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> UpdateBusinessContactNoteAsyncWithHttpInfo (string contactId, string noteId, ContactNoteContract note);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessContactsApi : IBusinessContactsApi
    {
        private Elli.Api.Contacts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessContactsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Contacts.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessContactsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Contacts.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Contacts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Business Contact Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns></returns>
        public void CreateBusinessContact (BusinessContactContract contact)
        {
             CreateBusinessContactWithHttpInfo(contact);
        }

        /// <summary>
        /// Create Business Contact Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateBusinessContactWithHttpInfo (BusinessContactContract contact)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BusinessContactsApi->CreateBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Business Contact Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateBusinessContactAsync (BusinessContactContract contact)
        {
             await CreateBusinessContactAsyncWithHttpInfo(contact);

        }

        /// <summary>
        /// Create Business Contact Create a new business contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateBusinessContactAsyncWithHttpInfo (BusinessContactContract contact)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BusinessContactsApi->CreateBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Business Contact Note Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns></returns>
        public void CreateBusinessContactNote (string contactId, ContactNoteContract note)
        {
             CreateBusinessContactNoteWithHttpInfo(contactId, note);
        }

        /// <summary>
        /// Create Business Contact Note Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateBusinessContactNoteWithHttpInfo (string contactId, ContactNoteContract note)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->CreateBusinessContactNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling BusinessContactsApi->CreateBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Business Contact Note Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateBusinessContactNoteAsync (string contactId, ContactNoteContract note)
        {
             await CreateBusinessContactNoteAsyncWithHttpInfo(contactId, note);

        }

        /// <summary>
        /// Create Business Contact Note Adds a note to the specified business contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateBusinessContactNoteAsyncWithHttpInfo (string contactId, ContactNoteContract note)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->CreateBusinessContactNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling BusinessContactsApi->CreateBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Business Contact Permanently deletes the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns></returns>
        public void DeleteBusinessContact (string contactId)
        {
             DeleteBusinessContactWithHttpInfo(contactId);
        }

        /// <summary>
        /// Delete Business Contact Permanently deletes the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBusinessContactWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->DeleteBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Business Contact Permanently deletes the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBusinessContactAsync (string contactId)
        {
             await DeleteBusinessContactAsyncWithHttpInfo(contactId);

        }

        /// <summary>
        /// Delete Business Contact Permanently deletes the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessContactAsyncWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->DeleteBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Business Contact Note Permanently deletes the specified note from the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns></returns>
        public void DeleteBusinessContactNote (string contactId, string noteId)
        {
             DeleteBusinessContactNoteWithHttpInfo(contactId, noteId);
        }

        /// <summary>
        /// Delete Business Contact Note Permanently deletes the specified note from the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBusinessContactNoteWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->DeleteBusinessContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BusinessContactsApi->DeleteBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Business Contact Note Permanently deletes the specified note from the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBusinessContactNoteAsync (string contactId, string noteId)
        {
             await DeleteBusinessContactNoteAsyncWithHttpInfo(contactId, noteId);

        }

        /// <summary>
        /// Delete Business Contact Note Permanently deletes the specified note from the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessContactNoteAsyncWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->DeleteBusinessContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BusinessContactsApi->DeleteBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve Business Contact Retrieves contact information for the specified contact ID.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>BusinessContactContract</returns>
        public BusinessContactContract GetBusinessContact (string contactId)
        {
             ApiResponse<BusinessContactContract> localVarResponse = GetBusinessContactWithHttpInfo(contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Business Contact Retrieves contact information for the specified contact ID.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of BusinessContactContract</returns>
        public ApiResponse< BusinessContactContract > GetBusinessContactWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->GetBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessContactContract)));
        }

        /// <summary>
        /// Retrieve Business Contact Retrieves contact information for the specified contact ID.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of BusinessContactContract</returns>
        public async System.Threading.Tasks.Task<BusinessContactContract> GetBusinessContactAsync (string contactId)
        {
             ApiResponse<BusinessContactContract> localVarResponse = await GetBusinessContactAsyncWithHttpInfo(contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Business Contact Retrieves contact information for the specified contact ID.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse (BusinessContactContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessContactContract>> GetBusinessContactAsyncWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->GetBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessContactContract)));
        }

        /// <summary>
        /// Retrieve Business Contact Note Retrieves the specified note for the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ContactNoteContract</returns>
        public ContactNoteContract GetBusinessContactNote (string contactId, string noteId)
        {
             ApiResponse<ContactNoteContract> localVarResponse = GetBusinessContactNoteWithHttpInfo(contactId, noteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Business Contact Note Retrieves the specified note for the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        public ApiResponse< ContactNoteContract > GetBusinessContactNoteWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->GetBusinessContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BusinessContactsApi->GetBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

        /// <summary>
        /// Retrieve Business Contact Note Retrieves the specified note for the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ContactNoteContract</returns>
        public async System.Threading.Tasks.Task<ContactNoteContract> GetBusinessContactNoteAsync (string contactId, string noteId)
        {
             ApiResponse<ContactNoteContract> localVarResponse = await GetBusinessContactNoteAsyncWithHttpInfo(contactId, noteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Business Contact Note Retrieves the specified note for the specified business contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> GetBusinessContactNoteAsyncWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->GetBusinessContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BusinessContactsApi->GetBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

        /// <summary>
        /// Update Business Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>BusinessContactContract</returns>
        public BusinessContactContract UpdateBusinessContact (string contactId, BusinessContactContract contact)
        {
             ApiResponse<BusinessContactContract> localVarResponse = UpdateBusinessContactWithHttpInfo(contactId, contact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Business Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>ApiResponse of BusinessContactContract</returns>
        public ApiResponse< BusinessContactContract > UpdateBusinessContactWithHttpInfo (string contactId, BusinessContactContract contact)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->UpdateBusinessContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BusinessContactsApi->UpdateBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessContactContract)));
        }

        /// <summary>
        /// Update Business Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of BusinessContactContract</returns>
        public async System.Threading.Tasks.Task<BusinessContactContract> UpdateBusinessContactAsync (string contactId, BusinessContactContract contact)
        {
             ApiResponse<BusinessContactContract> localVarResponse = await UpdateBusinessContactAsyncWithHttpInfo(contactId, contact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Business Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Business contact entity</param>
        /// <returns>Task of ApiResponse (BusinessContactContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessContactContract>> UpdateBusinessContactAsyncWithHttpInfo (string contactId, BusinessContactContract contact)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->UpdateBusinessContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BusinessContactsApi->UpdateBusinessContact");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessContactContract)));
        }

        /// <summary>
        /// Update Business Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ContactNoteContract</returns>
        public ContactNoteContract UpdateBusinessContactNote (string contactId, string noteId, ContactNoteContract note)
        {
             ApiResponse<ContactNoteContract> localVarResponse = UpdateBusinessContactNoteWithHttpInfo(contactId, noteId, note);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Business Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        public ApiResponse< ContactNoteContract > UpdateBusinessContactNoteWithHttpInfo (string contactId, string noteId, ContactNoteContract note)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->UpdateBusinessContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BusinessContactsApi->UpdateBusinessContactNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling BusinessContactsApi->UpdateBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

        /// <summary>
        /// Update Business Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ContactNoteContract</returns>
        public async System.Threading.Tasks.Task<ContactNoteContract> UpdateBusinessContactNoteAsync (string contactId, string noteId, ContactNoteContract note)
        {
             ApiResponse<ContactNoteContract> localVarResponse = await UpdateBusinessContactNoteAsyncWithHttpInfo(contactId, noteId, note);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Business Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> UpdateBusinessContactNoteAsyncWithHttpInfo (string contactId, string noteId, ContactNoteContract note)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BusinessContactsApi->UpdateBusinessContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BusinessContactsApi->UpdateBusinessContactNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling BusinessContactsApi->UpdateBusinessContactNote");

            var localVarPath = "/encompass/v1/businesscontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

    }
}
