/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Contacts
 *
 * Represents borrower and business contacts
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Contacts.Client;
using Elli.Api.Contacts.Model;

namespace Elli.Api.Contacts.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBorrowerContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Borrower Contact
        /// </summary>
        /// <remarks>
        /// Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns></returns>
        void CreateBorrowerContact (BorrowerContactContract contact);

        /// <summary>
        /// Create Borrower Contact
        /// </summary>
        /// <remarks>
        /// Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateBorrowerContactWithHttpInfo (BorrowerContactContract contact);
        /// <summary>
        /// Create Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns></returns>
        void CreateBorrowerContactNote (string contactId, ContactNoteContract note);

        /// <summary>
        /// Create Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateBorrowerContactNoteWithHttpInfo (string contactId, ContactNoteContract note);
        /// <summary>
        /// Delete Borrower Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns></returns>
        void DeleteBorrowerContact (string contactId);

        /// <summary>
        /// Delete Borrower Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBorrowerContactWithHttpInfo (string contactId);
        /// <summary>
        /// Delete Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns></returns>
        void DeleteBorrowerContactNote (string contactId, string noteId);

        /// <summary>
        /// Delete Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBorrowerContactNoteWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Retrieve Borrower Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>BorrowerContactContract</returns>
        BorrowerContactContract GetBorrowerContact (string contactId);

        /// <summary>
        /// Retrieve Borrower Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of BorrowerContactContract</returns>
        ApiResponse<BorrowerContactContract> GetBorrowerContactWithHttpInfo (string contactId);
        /// <summary>
        /// Retrieve Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ContactNoteContract</returns>
        ContactNoteContract GetBorrowerContactNote (string contactId, string noteId);

        /// <summary>
        /// Retrieve Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        ApiResponse<ContactNoteContract> GetBorrowerContactNoteWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Retrieve Borrower Contact Notes
        /// </summary>
        /// <remarks>
        /// Retrieve all notes from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>List&lt;ContactNoteContract&gt;</returns>
        List<ContactNoteContract> GetBorrowerContactNotes (string contactId);

        /// <summary>
        /// Retrieve Borrower Contact Notes
        /// </summary>
        /// <remarks>
        /// Retrieve all notes from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of List&lt;ContactNoteContract&gt;</returns>
        ApiResponse<List<ContactNoteContract>> GetBorrowerContactNotesWithHttpInfo (string contactId);
        /// <summary>
        /// Update Borrower Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>BorrowerContactContract</returns>
        BorrowerContactContract UpdateBorrowerContact (string contactId, BorrowerContactContract contact);

        /// <summary>
        /// Update Borrower Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>ApiResponse of BorrowerContactContract</returns>
        ApiResponse<BorrowerContactContract> UpdateBorrowerContactWithHttpInfo (string contactId, BorrowerContactContract contact);
        /// <summary>
        /// Update Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>ContactNoteContract</returns>
        ContactNoteContract UpdateBorrowerContactNote (string contactId, string noteId, ContactNoteContract contactNoteContract);

        /// <summary>
        /// Update Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        ApiResponse<ContactNoteContract> UpdateBorrowerContactNoteWithHttpInfo (string contactId, string noteId, ContactNoteContract contactNoteContract);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Borrower Contact
        /// </summary>
        /// <remarks>
        /// Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateBorrowerContactAsync (BorrowerContactContract contact);

        /// <summary>
        /// Create Borrower Contact
        /// </summary>
        /// <remarks>
        /// Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBorrowerContactAsyncWithHttpInfo (BorrowerContactContract contact);
        /// <summary>
        /// Create Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateBorrowerContactNoteAsync (string contactId, ContactNoteContract note);

        /// <summary>
        /// Create Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Adds a note to the specified contact. Returns the note ID in the response header.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBorrowerContactNoteAsyncWithHttpInfo (string contactId, ContactNoteContract note);
        /// <summary>
        /// Delete Borrower Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBorrowerContactAsync (string contactId);

        /// <summary>
        /// Delete Borrower Contact
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBorrowerContactAsyncWithHttpInfo (string contactId);
        /// <summary>
        /// Delete Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBorrowerContactNoteAsync (string contactId, string noteId);

        /// <summary>
        /// Delete Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Permanently deletes the specified note from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBorrowerContactNoteAsyncWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Retrieve Borrower Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of BorrowerContactContract</returns>
        System.Threading.Tasks.Task<BorrowerContactContract> GetBorrowerContactAsync (string contactId);

        /// <summary>
        /// Retrieve Borrower Contact
        /// </summary>
        /// <remarks>
        /// Retrieves contact information for the specified contact ID
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse (BorrowerContactContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<BorrowerContactContract>> GetBorrowerContactAsyncWithHttpInfo (string contactId);
        /// <summary>
        /// Retrieve Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ContactNoteContract</returns>
        System.Threading.Tasks.Task<ContactNoteContract> GetBorrowerContactNoteAsync (string contactId, string noteId);

        /// <summary>
        /// Retrieve Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Retrieves the specified note for the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> GetBorrowerContactNoteAsyncWithHttpInfo (string contactId, string noteId);
        /// <summary>
        /// Retrieve Borrower Contact Notes
        /// </summary>
        /// <remarks>
        /// Retrieve all notes from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of List&lt;ContactNoteContract&gt;</returns>
        System.Threading.Tasks.Task<List<ContactNoteContract>> GetBorrowerContactNotesAsync (string contactId);

        /// <summary>
        /// Retrieve Borrower Contact Notes
        /// </summary>
        /// <remarks>
        /// Retrieve all notes from the specified contact.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactNoteContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactNoteContract>>> GetBorrowerContactNotesAsyncWithHttpInfo (string contactId);
        /// <summary>
        /// Update Borrower Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of BorrowerContactContract</returns>
        System.Threading.Tasks.Task<BorrowerContactContract> UpdateBorrowerContactAsync (string contactId, BorrowerContactContract contact);

        /// <summary>
        /// Update Borrower Contact
        /// </summary>
        /// <remarks>
        /// Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of ApiResponse (BorrowerContactContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<BorrowerContactContract>> UpdateBorrowerContactAsyncWithHttpInfo (string contactId, BorrowerContactContract contact);
        /// <summary>
        /// Update Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>Task of ContactNoteContract</returns>
        System.Threading.Tasks.Task<ContactNoteContract> UpdateBorrowerContactNoteAsync (string contactId, string noteId, ContactNoteContract contactNoteContract);

        /// <summary>
        /// Update Borrower Contact Note
        /// </summary>
        /// <remarks>
        /// Updates the specified note with the values provided.
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> UpdateBorrowerContactNoteAsyncWithHttpInfo (string contactId, string noteId, ContactNoteContract contactNoteContract);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BorrowerContactsApi : IBorrowerContactsApi
    {
        private Elli.Api.Contacts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BorrowerContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BorrowerContactsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Contacts.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BorrowerContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BorrowerContactsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Contacts.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Contacts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Borrower Contact Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns></returns>
        public void CreateBorrowerContact (BorrowerContactContract contact)
        {
             CreateBorrowerContactWithHttpInfo(contact);
        }

        /// <summary>
        /// Create Borrower Contact Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateBorrowerContactWithHttpInfo (BorrowerContactContract contact)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BorrowerContactsApi->CreateBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Borrower Contact Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateBorrowerContactAsync (BorrowerContactContract contact)
        {
             await CreateBorrowerContactAsyncWithHttpInfo(contact);

        }

        /// <summary>
        /// Create Borrower Contact Create a new borrower contact. To create a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateBorrowerContactAsyncWithHttpInfo (BorrowerContactContract contact)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BorrowerContactsApi->CreateBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Borrower Contact Note Adds a note to the specified contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns></returns>
        public void CreateBorrowerContactNote (string contactId, ContactNoteContract note)
        {
             CreateBorrowerContactNoteWithHttpInfo(contactId, note);
        }

        /// <summary>
        /// Create Borrower Contact Note Adds a note to the specified contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateBorrowerContactNoteWithHttpInfo (string contactId, ContactNoteContract note)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->CreateBorrowerContactNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling BorrowerContactsApi->CreateBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Borrower Contact Note Adds a note to the specified contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateBorrowerContactNoteAsync (string contactId, ContactNoteContract note)
        {
             await CreateBorrowerContactNoteAsyncWithHttpInfo(contactId, note);

        }

        /// <summary>
        /// Create Borrower Contact Note Adds a note to the specified contact. Returns the note ID in the response header.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="note">Contact note entity.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateBorrowerContactNoteAsyncWithHttpInfo (string contactId, ContactNoteContract note)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->CreateBorrowerContactNote");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling BorrowerContactsApi->CreateBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (note != null && note.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(note); // http body (model) parameter
            }
            else
            {
                localVarPostBody = note; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Borrower Contact Permanently deletes the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns></returns>
        public void DeleteBorrowerContact (string contactId)
        {
             DeleteBorrowerContactWithHttpInfo(contactId);
        }

        /// <summary>
        /// Delete Borrower Contact Permanently deletes the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBorrowerContactWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->DeleteBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Borrower Contact Permanently deletes the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBorrowerContactAsync (string contactId)
        {
             await DeleteBorrowerContactAsyncWithHttpInfo(contactId);

        }

        /// <summary>
        /// Delete Borrower Contact Permanently deletes the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBorrowerContactAsyncWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->DeleteBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Borrower Contact Note Permanently deletes the specified note from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns></returns>
        public void DeleteBorrowerContactNote (string contactId, string noteId)
        {
             DeleteBorrowerContactNoteWithHttpInfo(contactId, noteId);
        }

        /// <summary>
        /// Delete Borrower Contact Note Permanently deletes the specified note from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBorrowerContactNoteWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->DeleteBorrowerContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BorrowerContactsApi->DeleteBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Borrower Contact Note Permanently deletes the specified note from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBorrowerContactNoteAsync (string contactId, string noteId)
        {
             await DeleteBorrowerContactNoteAsyncWithHttpInfo(contactId, noteId);

        }

        /// <summary>
        /// Delete Borrower Contact Note Permanently deletes the specified note from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBorrowerContactNoteAsyncWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->DeleteBorrowerContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BorrowerContactsApi->DeleteBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve Borrower Contact Retrieves contact information for the specified contact ID
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>BorrowerContactContract</returns>
        public BorrowerContactContract GetBorrowerContact (string contactId)
        {
             ApiResponse<BorrowerContactContract> localVarResponse = GetBorrowerContactWithHttpInfo(contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Borrower Contact Retrieves contact information for the specified contact ID
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of BorrowerContactContract</returns>
        public ApiResponse< BorrowerContactContract > GetBorrowerContactWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->GetBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BorrowerContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BorrowerContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BorrowerContactContract)));
        }

        /// <summary>
        /// Retrieve Borrower Contact Retrieves contact information for the specified contact ID
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of BorrowerContactContract</returns>
        public async System.Threading.Tasks.Task<BorrowerContactContract> GetBorrowerContactAsync (string contactId)
        {
             ApiResponse<BorrowerContactContract> localVarResponse = await GetBorrowerContactAsyncWithHttpInfo(contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Borrower Contact Retrieves contact information for the specified contact ID
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse (BorrowerContactContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BorrowerContactContract>> GetBorrowerContactAsyncWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->GetBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BorrowerContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BorrowerContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BorrowerContactContract)));
        }

        /// <summary>
        /// Retrieve Borrower Contact Note Retrieves the specified note for the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ContactNoteContract</returns>
        public ContactNoteContract GetBorrowerContactNote (string contactId, string noteId)
        {
             ApiResponse<ContactNoteContract> localVarResponse = GetBorrowerContactNoteWithHttpInfo(contactId, noteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Borrower Contact Note Retrieves the specified note for the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        public ApiResponse< ContactNoteContract > GetBorrowerContactNoteWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->GetBorrowerContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BorrowerContactsApi->GetBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

        /// <summary>
        /// Retrieve Borrower Contact Note Retrieves the specified note for the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ContactNoteContract</returns>
        public async System.Threading.Tasks.Task<ContactNoteContract> GetBorrowerContactNoteAsync (string contactId, string noteId)
        {
             ApiResponse<ContactNoteContract> localVarResponse = await GetBorrowerContactNoteAsyncWithHttpInfo(contactId, noteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Borrower Contact Note Retrieves the specified note for the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> GetBorrowerContactNoteAsyncWithHttpInfo (string contactId, string noteId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->GetBorrowerContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BorrowerContactsApi->GetBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

        /// <summary>
        /// Retrieve Borrower Contact Notes Retrieve all notes from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>List&lt;ContactNoteContract&gt;</returns>
        public List<ContactNoteContract> GetBorrowerContactNotes (string contactId)
        {
             ApiResponse<List<ContactNoteContract>> localVarResponse = GetBorrowerContactNotesWithHttpInfo(contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Borrower Contact Notes Retrieve all notes from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>ApiResponse of List&lt;ContactNoteContract&gt;</returns>
        public ApiResponse< List<ContactNoteContract> > GetBorrowerContactNotesWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->GetBorrowerContactNotes");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorrowerContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactNoteContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContactNoteContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactNoteContract>)));
        }

        /// <summary>
        /// Retrieve Borrower Contact Notes Retrieve all notes from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of List&lt;ContactNoteContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactNoteContract>> GetBorrowerContactNotesAsync (string contactId)
        {
             ApiResponse<List<ContactNoteContract>> localVarResponse = await GetBorrowerContactNotesAsyncWithHttpInfo(contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Borrower Contact Notes Retrieve all notes from the specified contact.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactNoteContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContactNoteContract>>> GetBorrowerContactNotesAsyncWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->GetBorrowerContactNotes");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorrowerContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactNoteContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContactNoteContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactNoteContract>)));
        }

        /// <summary>
        /// Update Borrower Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>BorrowerContactContract</returns>
        public BorrowerContactContract UpdateBorrowerContact (string contactId, BorrowerContactContract contact)
        {
             ApiResponse<BorrowerContactContract> localVarResponse = UpdateBorrowerContactWithHttpInfo(contactId, contact);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Borrower Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>ApiResponse of BorrowerContactContract</returns>
        public ApiResponse< BorrowerContactContract > UpdateBorrowerContactWithHttpInfo (string contactId, BorrowerContactContract contact)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->UpdateBorrowerContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BorrowerContactsApi->UpdateBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BorrowerContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BorrowerContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BorrowerContactContract)));
        }

        /// <summary>
        /// Update Borrower Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of BorrowerContactContract</returns>
        public async System.Threading.Tasks.Task<BorrowerContactContract> UpdateBorrowerContactAsync (string contactId, BorrowerContactContract contact)
        {
             ApiResponse<BorrowerContactContract> localVarResponse = await UpdateBorrowerContactAsyncWithHttpInfo(contactId, contact);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Borrower Contact Updates contact information for the specified contact ID. To update a contact, the firstName OR lastName is required AND one of the following parameters: personalEmail, currentMailingAddress.street1, homePhone, mobilePhone, workPhone.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="contact">Borrower contact entity</param>
        /// <returns>Task of ApiResponse (BorrowerContactContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BorrowerContactContract>> UpdateBorrowerContactAsyncWithHttpInfo (string contactId, BorrowerContactContract contact)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->UpdateBorrowerContact");
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling BorrowerContactsApi->UpdateBorrowerContact");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBorrowerContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BorrowerContactContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BorrowerContactContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BorrowerContactContract)));
        }

        /// <summary>
        /// Update Borrower Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>ContactNoteContract</returns>
        public ContactNoteContract UpdateBorrowerContactNote (string contactId, string noteId, ContactNoteContract contactNoteContract)
        {
             ApiResponse<ContactNoteContract> localVarResponse = UpdateBorrowerContactNoteWithHttpInfo(contactId, noteId, contactNoteContract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Borrower Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>ApiResponse of ContactNoteContract</returns>
        public ApiResponse< ContactNoteContract > UpdateBorrowerContactNoteWithHttpInfo (string contactId, string noteId, ContactNoteContract contactNoteContract)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->UpdateBorrowerContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BorrowerContactsApi->UpdateBorrowerContactNote");
            // verify the required parameter 'contactNoteContract' is set
            if (contactNoteContract == null)
                throw new ApiException(400, "Missing required parameter 'contactNoteContract' when calling BorrowerContactsApi->UpdateBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (contactNoteContract != null && contactNoteContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactNoteContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactNoteContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

        /// <summary>
        /// Update Borrower Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>Task of ContactNoteContract</returns>
        public async System.Threading.Tasks.Task<ContactNoteContract> UpdateBorrowerContactNoteAsync (string contactId, string noteId, ContactNoteContract contactNoteContract)
        {
             ApiResponse<ContactNoteContract> localVarResponse = await UpdateBorrowerContactNoteAsyncWithHttpInfo(contactId, noteId, contactNoteContract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Borrower Contact Note Updates the specified note with the values provided.
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The unique identifier that is returned in the response when the contact is created.</param>
        /// <param name="noteId">Unique identifier of the note assigned to the note when it was created.</param>
        /// <param name="contactNoteContract">Contact note entity.</param>
        /// <returns>Task of ApiResponse (ContactNoteContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactNoteContract>> UpdateBorrowerContactNoteAsyncWithHttpInfo (string contactId, string noteId, ContactNoteContract contactNoteContract)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling BorrowerContactsApi->UpdateBorrowerContactNote");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling BorrowerContactsApi->UpdateBorrowerContactNote");
            // verify the required parameter 'contactNoteContract' is set
            if (contactNoteContract == null)
                throw new ApiException(400, "Missing required parameter 'contactNoteContract' when calling BorrowerContactsApi->UpdateBorrowerContactNote");

            var localVarPath = "/encompass/v1/borrowercontacts/{contactId}/notes/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (contactNoteContract != null && contactNoteContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactNoteContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactNoteContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBorrowerContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNoteContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNoteContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNoteContract)));
        }

    }
}
